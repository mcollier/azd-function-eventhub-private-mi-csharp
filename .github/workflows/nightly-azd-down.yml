name: Nightly AZD down

on:
  schedule:
    # Nightly at 11pm.
    - cron: '0 23 * * *'
  workflow_dispatch:

# GitHub Actions workflow to deploy to Azure using azd
# To configure required secrets for connecting to Azure, simply run `azd pipeline config`

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/azure-dev-cli-apps:latest
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
    steps:
      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }} 
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      
      - name: 'Run Azure CLI commands'
        run: |
          az account show
          az group list
          pwd 
      # - name: Checkout code
      #   uses: actions/checkout@v3

      # - name: Log in with Azure (Federated Credentials)
      #   if: ${{ env.AZURE_CLIENT_ID != '' }}
      #   run: |
      #     azd auth login `
      #       --client-id "$Env:AZURE_CLIENT_ID" `
      #       --federated-credential-provider "github" `
      #       --tenant-id "$Env:AZURE_TENANT_ID"
      #   shell: pwsh

      # - name: Log in with Azure (Client Credentials)
      #   if: ${{ env.AZURE_CREDENTIALS != '' }}
      #   run: |
      #     $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
      #     Write-Host "::add-mask::$($info.clientSecret)"

      #     azd auth login `
      #       --client-id "$($info.clientId)" `
      #       --client-secret "$($info.clientSecret)" `
      #       --tenant-id "$($info.tenantId)"
      #   shell: pwsh
      #   env:
      #     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Tear Down
      #   run: |
      #     azd down --purge
      #   env:
      #     AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      #     AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      #     AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
